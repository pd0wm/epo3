-- Generated by: xvhdl 2.49 31-Jul-2008
-- Date: 29-Nov-13 9:40:22
-- Path: /home/tqiu/Documents/CheckMask/test

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
LIBRARY CellsLib;
USE CellsLib.CellsLib_DECL_PACK.all;

-- user directives added from .sls2vhdl


ARCHITECTURE extracted OF Check_mask IS

  SIGNAL n40: STD_LOGIC;
  SIGNAL n46: STD_LOGIC;
  SIGNAL n39: STD_LOGIC;
  SIGNAL n79: STD_LOGIC;
  SIGNAL n83: STD_LOGIC;
  SIGNAL state_2_port: STD_LOGIC;
  SIGNAL n82: STD_LOGIC;
  SIGNAL n76: STD_LOGIC;
  SIGNAL n42: STD_LOGIC;
  SIGNAL n77: STD_LOGIC;
  SIGNAL n48: STD_LOGIC;
  SIGNAL n78: STD_LOGIC;
  SIGNAL n54: STD_LOGIC;
  SIGNAL n65: STD_LOGIC;
  SIGNAL n80: STD_LOGIC;
  SIGNAL n81: STD_LOGIC;
  SIGNAL next_state_2_port: STD_LOGIC;
  SIGNAL n38: STD_LOGIC;
  SIGNAL n51: STD_LOGIC;
  SIGNAL n43: STD_LOGIC;
  SIGNAL n45: STD_LOGIC;
  SIGNAL n52: STD_LOGIC;
  SIGNAL n44: STD_LOGIC;
  SIGNAL n53: STD_LOGIC;
  SIGNAL n41: STD_LOGIC;
  SIGNAL next_state_1_port: STD_LOGIC;
  SIGNAL state_1_port: STD_LOGIC;
  SIGNAL pixel_1_port: STD_LOGIC;
  SIGNAL n74: STD_LOGIC;
  SIGNAL n75: STD_LOGIC;
  SIGNAL n73: STD_LOGIC;
  SIGNAL n58: STD_LOGIC;
  SIGNAL n55: STD_LOGIC;
  SIGNAL state_0_port: STD_LOGIC;
  SIGNAL n57: STD_LOGIC;
  SIGNAL n64: STD_LOGIC;
  SIGNAL n63: STD_LOGIC;
  SIGNAL n47: STD_LOGIC;
  SIGNAL n60: STD_LOGIC;
  SIGNAL n49: STD_LOGIC;
  SIGNAL pixel_0_port: STD_LOGIC;
  SIGNAL n61: STD_LOGIC;
  SIGNAL n62: STD_LOGIC;
  SIGNAL next_state_0_port: STD_LOGIC;
  SIGNAL n67: STD_LOGIC;
  SIGNAL n69: STD_LOGIC;
  SIGNAL n70: STD_LOGIC;
  SIGNAL n56: STD_LOGIC;
  SIGNAL n68: STD_LOGIC;
  SIGNAL n59: STD_LOGIC;
  SIGNAL n72: STD_LOGIC;
  SIGNAL n50: STD_LOGIC;
  SIGNAL n71: STD_LOGIC;
  SIGNAL n66: STD_LOGIC;

  SIGNAL mask_select_int: STD_LOGIC_VECTOR(1 DOWNTO 0);
  SIGNAL ready_int: STD_LOGIC;
  SIGNAL empty_int: STD_LOGIC;
  SIGNAL write_int: STD_LOGIC;
  SIGNAL addr_int: STD_LOGIC_VECTOR(7 DOWNTO 0);
  SIGNAL data_out_int: STD_LOGIC;

  SIGNAL vss: STD_LOGIC;
  SIGNAL vdd: STD_LOGIC;
BEGIN
  vdd <= '1';
  vss <= '0';

  mask_select <= mask_select_int;
  ready <= ready_int;
  empty <= empty_int;
  write <= write_int;
  addr <= addr_int;
  data_out <= data_out_int;

  write_int <= vss;

  U71: mu111 PORT MAP (n66, n67, n59, n50);
  U73: mu111 PORT MAP (n69, n70, n60, n49);
  U103: mu111 PORT MAP (n82, n83, n80, n77);
  U72: no210 PORT MAP (n68, n66, n67);
  U81: no210 PORT MAP (n74, n75, n73);
  U99: no210 PORT MAP (n74, n59, mask_select_int(0));
  U65: no210 PORT MAP (n59, n60, n58);
  U61: no210 PORT MAP (n52, n53, ready_int);
  U80: no210 PORT MAP (n73, rst, n71);
  U79: no210 PORT MAP (n53, state_0_port, n56);
  U62: no210 PORT MAP (data_in, state_0_port, n52);
  U97: no210 PORT MAP (n74, n60, mask_select_int(1));
  U69: no210 PORT MAP (start, state_1_port, n65);
  U94: no210 PORT MAP (state_0_port, n38, n78);
  U93: no210 PORT MAP (n78, n79, n39);
  U107: no210 PORT MAP (state_2_port, state_0_port, n63);
  U109: no210 PORT MAP (n79, state_1_port, n76);
  U66: na210 PORT MAP (n61, n62, next_state_0_port);
  U77: na210 PORT MAP (n71, n72, n69);
  U78: na210 PORT MAP (n56, n59, n72);
  U70: na210 PORT MAP (n56, n57, n61);
  U67: na210 PORT MAP (n63, n64, n62);
  U95: na210 PORT MAP (n80, n57, n38);
  U63: na210 PORT MAP (n54, n55, next_state_2_port);
  U105: na210 PORT MAP (state_0_port, n79, n83);
  U74: no310 PORT MAP (n66, n68, n59, n70);
  U82: no310 PORT MAP (data_in, state_0_port, next_state_1_port, n75);
  U90: no310 PORT MAP (next_state_1_port, n76, n63, n41);
  U60: no310 PORT MAP (next_state_1_port, n76, n63, n51);
  U75: iv110 PORT MAP (n56, n68);
  U76: iv110 PORT MAP (n71, n66);
  U100: iv110 PORT MAP (pixel_0_port, n59);
  U84: iv110 PORT MAP (mask(1), n47);
  U87: iv110 PORT MAP (mask(4), n44);
  U98: iv110 PORT MAP (pixel_1_port, n60);
  U86: iv110 PORT MAP (mask(3), n45);
  U88: iv110 PORT MAP (mask(5), n43);
  U96: iv110 PORT MAP (data_in, n57);
  U104: iv110 PORT MAP (state_1_port, n80);
  U101: iv110 PORT MAP (n81, n74);
  U68: iv110 PORT MAP (n65, n64);
  U83: iv110 PORT MAP (mask(0), n48);
  U89: iv110 PORT MAP (mask(6), n42);
  U108: iv110 PORT MAP (n76, n53);
  U106: iv110 PORT MAP (n63, n82);
  U111: iv110 PORT MAP (state_2_port, n79);
  U92: iv110 PORT MAP (mask(7), n40);
  U85: iv110 PORT MAP (mask(2), n46);
  U91: iv110 PORT MAP (n77, next_state_1_port);
  U64: na310 PORT MAP (n56, n57, n58, n55);
  U102: na310 PORT MAP (n54, n53, n77, n81);
  U110: na310 PORT MAP (state_0_port, n79, state_1_port, n54);
  pixel_reg_0_inst: dfn10 PORT MAP (n50, clk, pixel_0_port);
  pixel_reg_1_inst: dfn10 PORT MAP (n49, clk, pixel_1_port);
  addr_tri_1_inst: tinv10 PORT MAP (n47, n41, addr_int(1));
  addr_tri_3_inst: tinv10 PORT MAP (n45, n51, addr_int(3));
  addr_tri_4_inst: tinv10 PORT MAP (n44, n51, addr_int(4));
  addr_tri_5_inst: tinv10 PORT MAP (n43, n41, addr_int(5));
  addr_tri_0_inst: tinv10 PORT MAP (n48, n51, addr_int(0));
  addr_tri_6_inst: tinv10 PORT MAP (n42, n41, addr_int(6));
  data_out_tri: tinv10 PORT MAP (vdd, vss, data_out_int);
  addr_tri_2_inst: tinv10 PORT MAP (n46, n41, addr_int(2));
  addr_tri_7_inst: tinv10 PORT MAP (n40, n51, addr_int(7));
  empty_tri: tinv10 PORT MAP (n38, n39, empty_int);
  state_reg_0_inst: dfr11 PORT MAP (next_state_0_port, rst, clk, state_0_port);
  state_reg_1_inst: dfr11 PORT MAP (next_state_1_port, rst, clk, state_1_port);
  state_reg_2_inst: dfr11 PORT MAP (next_state_2_port, rst, clk, state_2_port);

END extracted;



